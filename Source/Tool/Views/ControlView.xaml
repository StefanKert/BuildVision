<UserControl x:Class="AlekseyNagovitsyn.BuildVision.Tool.Views.ControlView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converters="clr-namespace:AlekseyNagovitsyn.BuildVision.Tool.Views.Converters"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:res="clr-namespace:AlekseyNagovitsyn.BuildVision"
             xmlns:views="clr-namespace:AlekseyNagovitsyn.BuildVision.Tool.Views"
             xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:vs="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:core="clr-namespace:AlekseyNagovitsyn.BuildVision.Tool.Models.Indicators.Core"
             xmlns:viewModels="clr-namespace:AlekseyNagovitsyn.BuildVision.Tool.ViewModels"
             xmlns:extensions="clr-namespace:AlekseyNagovitsyn.BuildVision.Tool.Views.Extensions"
             mc:Ignorable="d"
             Name="OwnerUserControl"
             Background="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowBackgroundKey}}"
             DataContextChanged="OnDataContextChanged"
             SnapsToDevicePixels="True"
             UseLayoutRounding="True"
             d:DesignHeight="148"
             d:DesignWidth="697"
             d:DataContext="{Binding Source={StaticResource DesignViewModel}}">

    <UserControl.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="CommonResources.xaml" />
                <ResourceDictionary Source="ScrollViewerStyle.xaml" />
                <ResourceDictionary Source="DataGridColumnHeaderStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <viewModels:ControlViewModel x:Key="DesignViewModel"/>

            <converters:BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <converters:VisibilityToBooleanConverter x:Key="VisibilityToBoolConverter" />
            <converters:GridColumnHeadersVisibilityToBooleanConverter x:Key="ColumnHeadersVisibilityToBool" />
            <converters:InverseBooleanConverter x:Key="InverseBoolean" />
            <converters:IndicatorVectorIconConverter x:Key="IndicatorVectorIconConverter" />
            <converters:ObjectsReferencesEqualsConverter x:Key="ObjectsReferencesEqualsConverter" />
            <converters:IsErrorToBorderThicknessConverter x:Key="IsErrorToBorderThicknessConverter" />
            <converters:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter" />
            <converters:SubtractConstantConverter x:Key="SubtractConstantConverter"/>

            <converters:ValueConverterGroup x:Key="InvertedBoolToVisibilityConverter">
                <converters:InverseBooleanConverter />
                <converters:BooleanToVisibilityConverter />
            </converters:ValueConverterGroup>

            <converters:ValueConverterGroup x:Key="NotNullToVisibilityConverter">
                <converters:ObjectToIsNullConverter />
                <converters:InverseBooleanConverter />
                <converters:BooleanToVisibilityConverter />
            </converters:ValueConverterGroup>

            <converters:ValueConverterGroup x:Key="IsSeparatorIndicatorToVisibilityConverter">
                <converters:IsSeparatorIndicatorConverter />
                <converters:BooleanToVisibilityConverter />
            </converters:ValueConverterGroup>

            <converters:ValueConverterGroup x:Key="IsSeparatorIndicatorToNotVisibilityConverter">
                <converters:IsSeparatorIndicatorConverter />
                <converters:InverseBooleanConverter />
                <converters:BooleanToVisibilityConverter />
            </converters:ValueConverterGroup>
            
            <converters:ValueConverterGroup x:Key="PositiveNumberToVisibilityConverter">
                <converters:NumberToIsPositiveConverter/>
                <BooleanToVisibilityConverter/>
            </converters:ValueConverterGroup>

            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
            </Style>

            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.ComboBoxBackgroundKey}}" />
            </Style>

            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.ComboBoxBackgroundKey}}" />
                <Style.Triggers>
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter Property="Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.ComboBoxMouseOverBackgroundGradientKey}}" />
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarTextHoverKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="IndicatorLabel">

                <Setter Property="Label.Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />

                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled}" Value="false">
                        <Setter Property="Label.Opacity" Value="0.4" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <CollectionViewSource x:Key="GridColumnsCollection" Source="{Binding ElementName=Grid, Path=Columns}" />

            <CompositeCollection x:Key="GridColumnsMenuItems">
                <CollectionContainer Collection="{Binding Source={StaticResource GridColumnsCollection}}" />
                <Separator />
                <MenuItem Command="{Binding OpenGridColumnsSettingsAction}"
                          CommandParameter="{Binding Source={StaticResource GridColumnsCollection}}"
                          Header="{x:Static res:Resources.GridColumnsOpenSettingsMenuItem}"
                          IsCheckable="False"
                          IsChecked="False"
                          StaysOpenOnClick="False" />
            </CompositeCollection>

            <CompositeCollection x:Key="CopyBuildOutputFilesToClipboardMenuItems">
                <MenuItem Command="{Binding SelectedProjectCopyBuildOutputFilesToClipboardAction}"
                          Header="{x:Static res:Resources.SelectedProjectItem_CopyBuildOutputFilesToClipboard_CopyMenuItem}"/>
                <Separator />
                <MenuItem Header="{x:Static res:Resources.ProjectItemSettings_CopyBuildOutputFilesToClipboard_Type_BuiltAssemblies}"
                          IsCheckable="True"
                          StaysOpenOnClick="True"
                          IsChecked="{Binding ControlSettings.ProjectItemSettings.CopyBuildOutputFileTypesToClipboard.Built}" />
                <MenuItem Header="{x:Static res:Resources.ProjectItemSettings_CopyBuildOutputFilesToClipboard_Type_Symbols}"
                          IsCheckable="True"
                          StaysOpenOnClick="True"
                          IsChecked="{Binding ControlSettings.ProjectItemSettings.CopyBuildOutputFileTypesToClipboard.Symbols}" />
                <MenuItem Header="{x:Static res:Resources.ProjectItemSettings_CopyBuildOutputFilesToClipboard_Type_Documentation}"
                          IsCheckable="True"
                          StaysOpenOnClick="True"
                          IsChecked="{Binding ControlSettings.ProjectItemSettings.CopyBuildOutputFileTypesToClipboard.Documentation}" />
                <MenuItem Header="{x:Static res:Resources.ProjectItemSettings_CopyBuildOutputFilesToClipboard_Type_LocalizedRes}"
                          IsCheckable="True"
                          StaysOpenOnClick="True"
                          IsChecked="{Binding ControlSettings.ProjectItemSettings.CopyBuildOutputFileTypesToClipboard.LocalizedResourceDlls}" />
                <MenuItem Header="{x:Static res:Resources.ProjectItemSettings_CopyBuildOutputFilesToClipboard_Type_ContentFiles}"
                          IsCheckable="True"
                          StaysOpenOnClick="True"
                          IsChecked="{Binding ControlSettings.ProjectItemSettings.CopyBuildOutputFileTypesToClipboard.ContentFiles}" />
                <MenuItem Header="{x:Static res:Resources.ProjectItemSettings_CopyBuildOutputFilesToClipboard_Type_XmlSerAssemblies}"
                          IsCheckable="True"
                          StaysOpenOnClick="True"
                          IsChecked="{Binding ControlSettings.ProjectItemSettings.CopyBuildOutputFileTypesToClipboard.XmlSerializer}" />
                <Separator />
                <MenuItem Command="{Binding SelectedProjectCopyBuildOutputFilesToClipboardAction}"
                          Header="{x:Static res:Resources.SelectedProjectItem_CopyBuildOutputFilesToClipboard_CopyMenuItem}"/>
            </CompositeCollection>

            <CompositeCollection x:Key="SelectedProjectMenuItems">
                <MenuItem Command="{Binding SelectedProjectBuildAction}" Header="{x:Static res:Resources.BuildActionBuild}" />
                <MenuItem Command="{Binding SelectedProjectRebuildAction}" Header="{x:Static res:Resources.BuildActionRebuildAll}" />
                <MenuItem Command="{Binding SelectedProjectCleanAction}" Header="{x:Static res:Resources.BuildActionClean}" />
                <Separator />
                <MenuItem Command="{Binding SelectedProjectOpenContainingFolderAction}" Header="{x:Static res:Resources.SelectedProjectItem_OpenContainingFolder_MenuItem}" />
                <MenuItem Header="{x:Static res:Resources.SelectedProjectItem_CopyBuildOutputFilesToClipboard_ParentMenuItem}"
                          ItemsSource="{Binding Source={StaticResource CopyBuildOutputFilesToClipboardMenuItems}}"/>
            </CompositeCollection>

            <converters:ExpanderIsExpandedConverter x:Key="ExpanderIsExpandedConverter" />

            <converters:AlternatingRowBackgroundConverter x:Key="AlternatingRowBackgroundConverter" />

            <converters:MultiBindingStringFormatConverter x:Key="MultiBindingStringFormatConverter" />

        </ResourceDictionary>
    </UserControl.Resources>

    <Grid Margin="10,6,10,10">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <StackPanel 
            Grid.Row="0"
            Height="auto"
            Orientation="Vertical">
            
            <!-- Image and Label for current state -->
            <Grid Background="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowBackgroundKey}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <StackPanel Grid.Column="0" 
                            Orientation="Vertical"
                            Margin="0,-7,8,0">
                    <ContentControl Width="32"
                                Height="32"
                                VerticalAlignment="Top"
                                ClipToBounds="True"
                                SnapsToDevicePixels="True"
                                UseLayoutRounding="False"
                                Template="{Binding ImageCurrentState}" />
                    <ContentControl Width="24"
                                Height="24"
                                Margin="-4,-22"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Panel.ZIndex="1"
                                ClipToBounds="False"
                                SnapsToDevicePixels="True"
                                UseLayoutRounding="False"
                                Template="{Binding ImageCurrentStateResult}" />
                </StackPanel>

                <TextBlock Grid.Column="1"
                           FontSize="18"
                           Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}"
                           Text="{Binding TextCurrentState}"
                           TextTrimming="WordEllipsis"
                           extensions:TextBlockUtils.AutoTooltip="True"/>
            </Grid>

            <!-- Progress indicator -->
            <Grid>
                <Line Name="Line"
                      Margin="0,3,3,3"
                      Panel.ZIndex="1"
                      Stretch="Fill"
                      Stroke="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMenuSeparatorKey}}"
                      StrokeThickness="2"
                      X2="1" />

                <Line Margin="3"
                      Panel.ZIndex="2"
                      Stretch="Fill"
                      StrokeThickness="2"
                      X2="1">
                    <Line.Stroke>
                        <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                            <GradientStop Offset="1.0" Color="{Binding ElementName=Line, Path=Stroke.Color}" />
                            <GradientStop Offset="1.1" Color="CornflowerBlue" />
                            <GradientStop Offset="1.2" Color="{Binding ElementName=Line, Path=Stroke.Color}" />
                        </LinearGradientBrush>
                    </Line.Stroke>

                    <Line.Style>
                        <Style>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding BuildProgressViewModel.ActionProgressIsVisible}" Value="True">

                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard x:Name="LineProgressBeginStoryboard">
                                            <Storyboard>
                                                <DoubleAnimation AutoReverse="True"
                                                                 Duration="0:0:3"
                                                                 From="1.0"
                                                                 RepeatBehavior="Forever"
                                                                 Storyboard.TargetProperty="(Line.Stroke).(LinearGradientBrush.GradientStops)[0].(GradientStop.Offset)"
                                                                 To="-0.2" />
                                                <DoubleAnimation AutoReverse="True"
                                                                 Duration="0:0:3"
                                                                 From="1.1"
                                                                 RepeatBehavior="Forever"
                                                                 Storyboard.TargetProperty="(Line.Stroke).(LinearGradientBrush.GradientStops)[1].(GradientStop.Offset)"
                                                                 To="-0.1" />
                                                <DoubleAnimation AutoReverse="True"
                                                                 Duration="0:0:3"
                                                                 From="1.2"
                                                                 RepeatBehavior="Forever"
                                                                 Storyboard.TargetProperty="(Line.Stroke).(LinearGradientBrush.GradientStops)[2].(GradientStop.Offset)"
                                                                 To="0.0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>

                                    <DataTrigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="LineProgressBeginStoryboard" />
                                    </DataTrigger.ExitActions>

                                    <!--
                                        <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                        <Storyboard>
                                        <DoubleAnimation
                                        Storyboard.TargetProperty="(Line.Stroke).(LinearGradientBrush.GradientStops)[0].(GradientStop.Offset)"
                                        To="1.0" Duration="0:0:1" />
                                        <DoubleAnimation
                                        Storyboard.TargetProperty="(Line.Stroke).(LinearGradientBrush.GradientStops)[1].(GradientStop.Offset)"
                                        To="1.1" Duration="0:0:1" />
                                        <DoubleAnimation
                                        Storyboard.TargetProperty="(Line.Stroke).(LinearGradientBrush.GradientStops)[2].(GradientStop.Offset)"
                                        To="1.2" Duration="0:0:1" />
                                        </Storyboard>
                                        </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    -->

                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Line.Style>
                </Line>
            </Grid>

            <!-- Build buttons and ValueIndicators -->
            <Grid Visibility="{Binding ControlSettings.GeneralSettings.IndicatorsPanelVisible,
                                       Converter={StaticResource BoolToVisibilityConverter}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <WrapPanel 
                    Grid.Column="0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Margin="0,0,0,0"
                    Orientation="Horizontal">

                    <Button Name="BuildSolutionButton"
                            Command="{Binding BuildSolutionAction}"
                            Visibility="{Binding BuildProgressViewModel.ActionProgressIsVisible, Converter={StaticResource InvertedBoolToVisibilityConverter}}"
                            IsEnabled="{Binding SolutionItem.IsEmpty, Converter={StaticResource InverseBoolean}}"
                            ToolTip="{x:Static res:Resources.BuildSolutionButtonTooltip}">
                        <StackPanel Orientation="Horizontal">
                            <Viewbox Width="16"
                                 Height="16"
                                 Stretch="Uniform">
                                <Canvas Width="100" Height="100">
                                    <Rectangle Canvas.Left="0"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="90"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="10"
                                           Canvas.Top="90"
                                           Width="80"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="20"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="45"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="70"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="58"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="33"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="45"
                                           Canvas.Top="0"
                                           Width="10"
                                           Height="25"
                                           Fill="{Binding ElementName=BuildSolutionButtonPolygon1, Path=Fill}" />
                                    <Polygon Name="BuildSolutionButtonPolygon1"
                                             Points="25,15 75,15 50,45">
                                        <Polygon.Style>
                                            <Style TargetType="Polygon">
                                                <Setter Property="Fill" Value="Gray" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=BuildSolutionButton, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Fill" Value="#399AFC" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Polygon.Style>
                                    </Polygon>
                                </Canvas>
                            </Viewbox>
                        </StackPanel>
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource ToolBarButtonBaseStyle}" />
                        </Button.Style>
                    </Button>

                    <Button Name="RebuildSolutionButton"
                            Command="{Binding RebuildSolutionAction}"
                            Visibility="{Binding BuildProgressViewModel.ActionProgressIsVisible, Converter={StaticResource InvertedBoolToVisibilityConverter}}"
                            IsEnabled="{Binding SolutionItem.IsEmpty, Converter={StaticResource InverseBoolean}}"
                            ToolTip="{x:Static res:Resources.RebuildSolutionButtonTooltip}">
                        <StackPanel Orientation="Horizontal">
                            <Viewbox Width="16"
                                 Height="16"
                                 Stretch="Uniform">
                                <Canvas Width="100" Height="100">
                                    <Rectangle Canvas.Left="0"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="90"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="10"
                                           Canvas.Top="90"
                                           Width="80"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="20"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="45"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray"
                                           Visibility="Collapsed" />
                                    <Rectangle Canvas.Left="70"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="58"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="33"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="45"
                                           Canvas.Top="0"
                                           Width="10"
                                           Height="25"
                                           Fill="{Binding ElementName=RebuildSolutionButtonPolygon1, Path=Fill}" />
                                    <Polygon Points="25,15 75,15 50,45" 
                                             Fill="{Binding ElementName=RebuildSolutionButtonPolygon1, Path=Fill}" />
                                    <Polygon Name="RebuildSolutionButtonPolygon1"
                                             Points="25,35 75,35 50,65">
                                        <Polygon.Style>
                                            <Style TargetType="Polygon">
                                                <Setter Property="Fill" Value="Gray" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=RebuildSolutionButton, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Fill" Value="#399AFC" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Polygon.Style>
                                    </Polygon>
                                </Canvas>
                            </Viewbox>
                        </StackPanel>
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource ToolBarButtonBaseStyle}" />
                        </Button.Style>
                    </Button>

                    <Button Name="CleanSolutionButton"
                            Command="{Binding CleanSolutionAction}"
                            Visibility="{Binding BuildProgressViewModel.ActionProgressIsVisible, Converter={StaticResource InvertedBoolToVisibilityConverter}}"
                            IsEnabled="{Binding SolutionItem.IsEmpty, Converter={StaticResource InverseBoolean}}"
                            ToolTip="{x:Static res:Resources.CleanSolutionButtonTooltip}">
                        <StackPanel Orientation="Horizontal">
                            <Viewbox Width="16"
                                 Height="16"
                                 Stretch="Uniform">
                                <Canvas Width="100" Height="100">
                                    <Rectangle Canvas.Left="0"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="90"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="10"
                                           Canvas.Top="90"
                                           Width="80"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="20"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="45"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray"
                                           Visibility="Collapsed" />
                                    <Rectangle Canvas.Left="70"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="58"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="33"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Canvas Width="128" 
                                            Height="128"
                                            Canvas.Left="10"
                                            Canvas.Top="0">
                                        <Canvas.RenderTransform>
                                            <ScaleTransform ScaleX="0.5" ScaleY="0.5" />
                                        </Canvas.RenderTransform>
                                        <Path>
                                            <Path.Data>
                                                <PathGeometry Figures="m 80.839352 126.21041 c 19.382138 -7.62246 40.553388 -32.520564 45.985518 -54.080519 1.9315 -7.666081 1.19136 -8.587519 -6.89787 -8.587519 -10.58084 0 -21.608968 -3.827257 -32.455148 -11.263404 l -4.3675 -2.994357 -17.0489 17.048905 -17.04891 17.048904 1.79599 4.829976 c 2.74924 7.39358 10.25938 22.020384 14.7731 28.772194 7.35822 11.00673 8.68939 11.81132 15.26372 9.22582 z m -20.48864 -66.210645 16.48864 -16.542606 -4.32846 -4.066701 c -3.7308 -3.505183 -4.75974 -3.980446 -7.45193 -3.442009 -1.71791 0.343581 -4.17299 1.610672 -5.45575 2.815757 L 57.270932 40.95527 37.295752 20.998821 17.32057 1.0423734 l -4.92495 0 c -4.0816501 0 -5.4477601 0.500876 -7.9781601 2.92516 -3.54111004 3.392593 -4.67989004 7.8373096 -3.09635 12.0852446 0.61294 1.644277 9.7356501 11.636757 20.2726701 22.205511 l 19.158232 19.215917 -2.05732 2.284083 c -2.88587 3.203961 -3.46082 5.373722 -2.26367 8.542767 0.99324 2.62928 5.66246 8.241316 6.85678 8.241316 0.31586 0 7.99416 -7.444173 17.06291 -16.542607 z" FillRule="NonZero"/>
                                            </Path.Data>
                                            <Path.Style>
                                                <Style TargetType="Path">
                                                    <Setter Property="Fill" Value="Gray" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding ElementName=CleanSolutionButton, Path=IsMouseOver}" Value="True">
                                                            <Setter Property="Fill" Value="#D0A200" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Path.Style>
                                        </Path>
                                    </Canvas>

                                </Canvas>
                            </Viewbox>
                        </StackPanel>
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource ToolBarButtonBaseStyle}" />
                        </Button.Style>
                    </Button>

                    <Button Name="CancelBuildSolutionButton"
                            Command="{Binding CancelBuildSolutionAction}"
                            Visibility="{Binding BuildProgressViewModel.ActionProgressIsVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                            HorizontalAlignment="Stretch"
                            MinWidth="66"
                            ToolTip="{x:Static res:Resources.CancelBuildSolutionButtonTooltip}">
                        <StackPanel Orientation="Horizontal">
                            <Viewbox Width="16"
                                 Height="16"
                                 Stretch="Uniform">
                                <Canvas Width="100" Height="100">
                                    <Canvas.RenderTransform>
                                        <TranslateTransform X="0" Y="-8"/>
                                    </Canvas.RenderTransform>
                                    <Rectangle Canvas.Left="0"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="90"
                                           Canvas.Top="40"
                                           Width="10"
                                           Height="60"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="10"
                                           Canvas.Top="90"
                                           Width="80"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="20"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray"
                                           Visibility="Collapsed" />
                                    <Rectangle Canvas.Left="45"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray"
                                           Visibility="Collapsed" />
                                    <Rectangle Canvas.Left="70"
                                           Canvas.Top="50"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray"
                                           Visibility="Collapsed" />
                                    <Rectangle Canvas.Left="58"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Rectangle Canvas.Left="33"
                                           Canvas.Top="70"
                                           Width="10"
                                           Height="10"
                                           Fill="Gray" />
                                    <Line X1="30"
                                          Y1="20"
                                          X2="70"
                                          Y2="60"
                                          StrokeThickness="12"
                                          Stroke="{Binding ElementName=CancelBuildSolutionButtonLine1, Path=Stroke}" />
                                    <Line Name="CancelBuildSolutionButtonLine1"
                                          X1="70"
                                          Y1="20"
                                          X2="30"
                                          Y2="60"
                                          StrokeThickness="12">
                                        <Line.Style>
                                            <Style TargetType="Line">
                                                <Setter Property="Stroke" Value="Gray" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=CancelBuildSolutionButton, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Stroke" Value="Red" />
                                                    </DataTrigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Stroke" Value="Red" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Line.Style>
                                    </Line>
                                </Canvas>
                            </Viewbox>
                            <TextBlock Margin="2,0,0,0"  Text="{x:Static res:Resources.CancelBuildSolutionButtonCaption}" />
                        </StackPanel>
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource ToolBarButtonBaseStyle}">
                                <Setter Property="IsEnabled" Value="True" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SolutionItem.IsEmpty}" Value="True" >
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding BuildProgressViewModel.ActionProgressIsPaused}" Value="True" >
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>

                </WrapPanel>
                
                <Border Grid.Column="1" 
                        Width="2" 
                        BorderThickness="2" 
                        BorderBrush="{DynamicResource {x:Static vs:EnvironmentColors.CommandBarMenuSeparatorBrushKey}}"
                        Margin="10,2,10,2"/>

                <ListBox 
                     Grid.Column="2"
                     Background="Transparent"
                     BorderThickness="0"
                     ScrollViewer.HorizontalScrollBarVisibility="Auto"
                     UseLayoutRounding="False">
                    <ListBox.Style>
                        <Style TargetType="{x:Type ListBox}">
                            <Style.Triggers>
                                <Trigger Property="HasItems" Value="True">
                                    <Setter Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ListBox.Style>
                    <ListBox.ItemsSource>
                        <Binding Path="ValueIndicators" />
                    </ListBox.ItemsSource>
                    <ListBox.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <!--
                            commented out because IsEnabled=false
                            <Style.Resources>
                            SelectedItem with focus
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                            SelectedItem without focus
                            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                            SelectedItem text foreground
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
                            </Style.Resources>
                        -->

                            <Setter Property="IsEnabled" Value="false" />

                            <!--
                            commented out because IsEnabled=false
                            <Setter Property="Focusable" Value="false"/>
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                        -->

                            <Setter Property="BorderBrush" Value="Transparent" />
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="Margin" Value="0,0,5,0" />

                            <Setter Property="Border.BorderBrush" Value="Transparent" />
                            <Setter Property="Border.BorderThickness" Value="0" />
                            <Setter Property="Border.Background" Value="Transparent" />
                            <Setter Property="Border.Padding" Value="0" />
                        </Style>

                    </ListBox.Resources>

                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel VerticalAlignment="Center" Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="core:ValueIndicator">
                            <StackPanel Orientation="Vertical">
                                <Grid Width="{Binding Width}" 
                                  Visibility="{Binding Converter={StaticResource IsSeparatorIndicatorToVisibilityConverter}}" />

                                <Grid ToolTip="{Binding ToolTip}"
                                  ToolTipService.ShowOnDisabled="True"
                                  Width="{Binding Width}"
                                  Visibility="{Binding Converter={StaticResource IsSeparatorIndicatorToNotVisibilityConverter}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <Border Grid.Column="0"
                                        Grid.ColumnSpan="2"
                                        BorderBrush="Red"
                                        BorderThickness="{Binding IsUpdateError,
                                                                  Converter={StaticResource IsErrorToBorderThicknessConverter}}" />

                                    <ContentControl Grid.Column="0"
                                                Width="16"
                                                Height="16"
                                                Template="{Binding Converter={StaticResource IndicatorVectorIconConverter}}" />

                                    <Label Grid.Column="1"
                                       Content="{Binding StringValue}"
                                       Style="{StaticResource ResourceKey=IndicatorLabel}" />

                                </Grid>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </Grid>

            <Separator Height="4" Background="{x:Null}" />

        </StackPanel>

        <!-- Note: ScrollViewer.CanContentScroll: 
            true if the ScrollViewer scrolls in terms of logical units; 
            false if the ScrollViewer scrolls in terms of physical units. 
            The default is false.  
        -->
        <DataGrid Name="Grid"
                  Grid.Row="1"
                  AlternatingRowBackground="{Binding ElementName=Grid,
                                                     Path=RowBackground,
                                                     Converter={StaticResource AlternatingRowBackgroundConverter}}"
                  AlternationCount="2"
                  AreRowDetailsFrozen="True"
                  AutoGenerateColumns="False"
                  Background="{DynamicResource {x:Static vsfx:VsBrushes.ToolboxBackgroundKey}}"
                  BorderBrush="{DynamicResource {x:Static vsfx:VsBrushes.PanelBorderKey}}"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="True"
                  CanUserResizeRows="False"
                  CanUserSortColumns="True"
                  EnableColumnVirtualization="False"
                  EnableRowVirtualization="False"
                  GridLinesVisibility="None"
                  HeadersVisibility="{Binding GridHeadersVisibility}"
                  IsReadOnly="True"
                  ItemsSource="{Binding GroupedProjectsList,
                                        NotifyOnTargetUpdated=True}"
                  RowBackground="{DynamicResource {x:Static vsfx:VsBrushes.ToolboxBackgroundKey}}"
                  ScrollViewer.CanContentScroll="{Binding GridGroupPropertyName,
                                                          Converter={StaticResource StringIsNullOrEmptyConverter}}"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  ScrollViewer.IsDeferredScrollingEnabled="False"
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  SelectedItem="{Binding SelectedProjectItem}"
                  SelectionMode="Single"
                  SelectionUnit="FullRow"
                  Sorting="GridOnSorting"
                  VirtualizingStackPanel.IsVirtualizing="False">

            <DataGrid.Style>
                <Style TargetType="DataGrid">
                    <Setter Property="ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle}" />
                </Style>
            </DataGrid.Style>

            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{x:Static res:Resources.GridHeaderVisibleMenuItem}"
                              IsCheckable="True"
                              IsChecked="{Binding GridHeadersVisibility,
                                                  Converter={StaticResource ResourceKey=ColumnHeadersVisibilityToBool}}" />
                    <MenuItem Header="{x:Static res:Resources.GridColumnsMenuItems}" 
                              ItemsSource="{Binding Source={StaticResource GridColumnsMenuItems}}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="StaysOpenOnClick" Value="True" />
                                <Setter Property="IsCheckable" Value="True" />
                                <Setter Property="IsChecked" 
                                        Value="{Binding Visibility, Converter={StaticResource ResourceKey=VisibilityToBoolConverter}}" />
                                <Setter Property="Header" 
                                        Value="{Binding (extensions:DataGridColumnExtensions.Name)}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="{x:Static res:Resources.GridColumnsGroupMenuItems}" 
                              ItemsSource="{Binding GridColumnsGroupMenuItems}" />
                    <MenuItem Header="{x:Static res:Resources.SelectedProjectItemMenuItems}"
                              ItemsSource="{Binding Source={StaticResource SelectedProjectMenuItems}}"
                              Visibility="{Binding SelectedProjectItem,
                                                   Converter={StaticResource NotNullToVisibilityConverter}}" />
                </ContextMenu>
            </DataGrid.ContextMenu>

            <DataGrid.GroupStyle>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type GroupItem}">
                                        <Expander Collapsed="DataGridExpanderOnCollapsed"
                                                  Expanded="DataGridExpanderOnExpanded"
                                                  Mouse.PreviewMouseWheel="DataGridExpanderOnPreviewMouseWheel"
                                                  OverridesDefaultStyle="True"
                                                  Template="{StaticResource ExpanderTemplate}">
                                            <Expander.IsExpanded>
                                                <MultiBinding Converter="{StaticResource ResourceKey=ExpanderIsExpandedConverter}" Mode="OneWay">
                                                    <Binding Mode="OneWay" />
                                                    <Binding Path="DataContext.ControlSettings.GridSettings.CollapsedGroups" Source="{x:Reference OwnerUserControl}" />
                                                </MultiBinding>
                                            </Expander.IsExpanded>
                                            <Expander.Header>
                                                <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                                                    <TextBlock Foreground="{DynamicResource {x:Static vsfx:VsBrushes.GrayTextKey}}">
                                                        <TextBlock.Text>
                                                            <MultiBinding Converter="{StaticResource ResourceKey=MultiBindingStringFormatConverter}" Mode="OneWay">
                                                                <Binding Path="DataContext.ControlSettings.GridSettings.GroupHeaderRawFormat" Source="{x:Reference OwnerUserControl}" />
                                                                <Binding Path="DataContext.GridGroupHeaderName" Source="{x:Reference OwnerUserControl}" />
                                                                <Binding Path="Name" />
                                                                <Binding Path="ItemCount" />
                                                            </MultiBinding>
                                                        </TextBlock.Text>
                                                    </TextBlock>
                                                </StackPanel>
                                            </Expander.Header>
                                            <ItemsPresenter />
                                        </Expander>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </DataGrid.GroupStyle>

            <DataGrid.CellStyle>
                <Style TargetType="DataGridCell">

                    <Style.Triggers>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
                        </Trigger>

                        <!--
                            <DataTrigger Binding="{Binding ErrorsCount, Converter={StaticResource NumberIsPositive}}" Value="True">
                            <Setter Property="Background" Value="PaleVioletRed" />
                            <Setter Property="Foreground" Value="Black" />
                            </DataTrigger>
                        -->

                    </Style.Triggers>


                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="DataGridCell">
                                <Border Background="{TemplateBinding Panel.Background}"
                                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                                        BorderThickness="0"
                                        SnapsToDevicePixels="True">
                                    <!--  BorderThickness="{TemplateBinding Border.BorderThickness}"  -->
                                    <ContentPresenter Margin="1,0,0,0"
                                                      VerticalAlignment="Center"
                                                      Content="{TemplateBinding ContentControl.Content}"
                                                      ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                </Style>
            </DataGrid.CellStyle>

            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">

                    <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
                    <Setter Property="BorderThickness" Value="0,1,0,1" />
                    <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource self}}" />

                    <Setter Property="DetailsVisibility" Value="{Binding ErrorsCount, Mode=OneWay, Converter={StaticResource PositiveNumberToVisibilityConverter}}" />
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="DataGridRowOnPreviewMouseLeftButtonDown" />

                    <Style.Triggers>

                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource ObjectsReferencesEqualsConverter}">
                                    <Binding Path="DataContext.CurrentProject" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type UserControl}}" />
                                    <Binding Path="." />
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter Property="BorderBrush" Value="CornflowerBlue" />
                            <Setter Property="BorderThickness" Value="0,1,0,1" />
                        </DataTrigger>

                        <!-- TODO: Make Selected row style similar to style in VisualStudio.-->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="DodgerBlue" />
                            <Setter Property="BorderThickness" Value="0,1,0,1" />
                        </Trigger>

                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.RowDetailsTemplate>
                <DataTemplate>
                    <views:ProjectItemDetailsView Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}},
                                                                  Path=ActualWidth,
                                                                  Converter={StaticResource SubtractConstantConverter},
                                                                  ConverterParameter=6}"
                                                  HorizontalAlignment="Left"
                                                  Background="Transparent"
                                                  MouseLeftButtonDown="DataGridRowDetailsOnMouseLeftButtonDown"
                                                  ProjectItem="{Binding}"
                                                  MaxHeight="100" />
                </DataTemplate>
            </DataGrid.RowDetailsTemplate>

        </DataGrid>

    </Grid>
</UserControl>
