<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Build.Framework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Build.Framework.BuildEngineResult">
            <summary>
            This structure is used to return the result of the build and the target outputs.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEngineResult.buildResult">
            <summary>
            Did the build pass or fail
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEngineResult.targetOutputsPerProject">
            <summary>
            Target outputs by project
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEngineResult.#ctor(System.Boolean,System.Collections.Generic.List{System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.ITaskItem[]}})">
            <summary>
            The constructor takes the result of the build and a list of the target outputs per project
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEngineResult.Result">
            <summary>
            Did the build pass or fail. True means the build succeeded, False means the build failed.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEngineResult.TargetOutputsPerProject">
            <summary>
            Outputs of the targets per project.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildErrorEventArgs">
            <summary>
            Arguments for error events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.subcategory">
            <summary>
            Subcategory of the error
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.file">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.projectFile">
            <summary>
            The project which issued the event
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.lineNumber">
            <summary>
            Line number
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.columnNumber">
            <summary>
            Column number
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.endLineNumber">
            <summary>
            End line number
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildErrorEventArgs.endColumnNumber">
            <summary>
            End column number
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event sub-category</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor which allows a timestamp to be set
            </summary>
            <param name="subcategory">event sub-category</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor which allows a timestamp to be set
            </summary>
            <param name="subcategory">event sub-category</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildErrorEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.Subcategory">
            <summary>
            The custom sub-type of the event.         
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.Code">
            <summary>
            Code associated with event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.File">
            <summary>
            File associated with event.   
            </summary>  
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.ProjectFile">
            <summary>
            The project file which issued this event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.LineNumber">
            <summary>
            Line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.ColumnNumber">
            <summary>
            Column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.EndLineNumber">
            <summary>
            Ending line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildErrorEventArgs.EndColumnNumber">
            <summary>
            Ending column number of interest in associated file. 
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildEventArgs">
            <summary>
            This class encapsulates the default data associated with build events. 
            It is intended to be extended/sub-classed.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.helpKeyword">
            <summary>
            Help keyword
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.senderName">
            <summary>
            Sender name
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.threadId">
            <summary>
            Thread id
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventArgs.buildEventContext">
            <summary>
            Build event context
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows all event data to be initialized while providing a custom timestamp.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">TimeStamp of when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.Timestamp">
            <summary>
            The time when event was raised.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.ThreadId">
            <summary>
            The thread that raised event.  
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.Message">
            <summary>
            Text of event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.HelpKeyword">
            <summary>
            Custom help keyword associated with event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.SenderName">
            <summary>
            Name of the object sending this event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventArgs.BuildEventContext">
            <summary>
            Event contextual information for the build event argument
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildFinishedEventArgs">
            <summary>
            This class represents the event arguments for build finished events.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildFinishedEventArgs.succeeded">
            <summary>
            Whether the build succeeded
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor to initialize all parameters.
            Sender field cannot be set here and is assumed to be "MSBuild"
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="succeeded">True indicates a successful build</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor(System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Constructor which allows the timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="succeeded">True indicates a successful build</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildFinishedEventArgs.#ctor(System.String,System.String,System.Boolean,System.DateTime,System.Object[])">
            <summary>
            Constructor which allows the timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="succeeded">True indicates a successful build</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildFinishedEventArgs.Succeeded">
            <summary>
            Succeeded is true if the build succeeded; false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.MessageImportance">
            <summary>
            This enumeration provides three levels of importance for messages.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.MessageImportance.High">
            <summary>
            High importance, appears in less verbose logs
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.MessageImportance.Normal">
            <summary>
            Normal importance
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.MessageImportance.Low">
            <summary>
            Low importance, appears in more verbose logs
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildMessageEventArgs">
            <summary>
            Arguments for message events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime)">
            <summary>
            This constructor allows a timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime,System.Object[])">
            <summary>
            This constructor allows a timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime)">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime,System.Object[])">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="importance">importance of the message</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.Importance">
            <summary>
            Importance of the message
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.Subcategory">
            <summary>
            The custom sub-type of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.Code">
            <summary>
            Code associated with event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.File">
            <summary>
            File associated with event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.LineNumber">
            <summary>
            Line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.ColumnNumber">
            <summary>
            Column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.EndLineNumber">
            <summary>
            Ending line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.EndColumnNumber">
            <summary>
            Ending column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildMessageEventArgs.ProjectFile">
            <summary>
            The project which was building when the message was issued.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStartedEventArgs">
            <summary>
            Arguments for build started events.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor to initialize all parameters.
            Sender field cannot be set here and is assumed to be "MSBuild"
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructor to initialize all parameters.
            Sender field cannot be set here and is assumed to be "MSBuild"
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="environmentOfBuild">A dictionary which lists the environment of the build when the build is started.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Constructor to allow timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStartedEventArgs.#ctor(System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            Constructor to allow timestamp to be set
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
            <param name="messageArgs">message args</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildStartedEventArgs.BuildEnvironment">
            <summary>
            The environment which is used at the start of the build
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStatusEventArgs">
            <summary> 
            Base class for build status events.  This class is meant
            to be extended.  
            </summary> 
            <remarks> 
            WARNING: marking a type [Serializable] without implementing 
            ISerializable imposes a serialization contract -- it is a 
            promise to never change the type's fields i.e. the type is 
            immutable; adding new fields in the next version of the type 
            without following certain special FX guidelines, can break both 
            forward and backward compatibility 
            </remarks> 
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor">
            <summary> 
            Default constructor 
            </summary> 
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor(System.String,System.String,System.String)">
            <summary> 
            This constructor allows event data to be initialized.  
            </summary> 
            <param name="message">text message</param> 
            <param name="helpKeyword">help keyword </param> 
            <param name="senderName">name of event sender</param> 
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary> 
            This constructor allows timestamp to be set
            </summary> 
            <param name="message">text message</param> 
            <param name="helpKeyword">help keyword </param> 
            <param name="senderName">name of event sender</param> 
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildStatusEventArgs.#ctor(System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary> 
            This constructor allows timestamp to be set
            </summary> 
            <param name="message">text message</param> 
            <param name="helpKeyword">help keyword </param> 
            <param name="senderName">name of event sender</param> 
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">Optional arguments for formatting the message string.</param>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildWarningEventArgs">
            <summary>
            Arguments for warning events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildWarningEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.Subcategory">
            <summary>
            The custom sub-type of the event.         
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.Code">
            <summary>
            Code associated with event. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.File">
            <summary>
            File associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.LineNumber">
            <summary>
            Line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.ColumnNumber">
            <summary>
            Column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.EndLineNumber">
            <summary>
            Ending line number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.EndColumnNumber">
            <summary>
            Ending column number of interest in associated file. 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildWarningEventArgs.ProjectFile">
            <summary>
            The project which was building when the message was issued.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.CriticalBuildMessageEventArgs">
            <summary>
            Arguments for critical message events. These always have High importance.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor allows timestamp to be set
            </summary>
            <param name="subcategory">event subcategory</param>
            <param name="code">event code</param>
            <param name="file">file associated with the event</param>
            <param name="lineNumber">line number (0 if not applicable)</param>
            <param name="columnNumber">column number (0 if not applicable)</param>
            <param name="endLineNumber">end line number (0 if not applicable)</param>
            <param name="endColumnNumber">end column number (0 if not applicable)</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of event sender</param>
            <param name="eventTimestamp">custom timestamp for the event</param>
            <param name="messageArgs">message arguments</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CriticalBuildMessageEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.CustomBuildEventArgs">
            <summary>
            Arguments for custom build events.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor allows event data to be initialized.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of sender</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized including timestamp.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="M:Microsoft.Build.Framework.CustomBuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor allows event data to be initialized including timestamp.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="senderName">name of sender</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
            <param name="messageArgs">Message arguments</param>
        </member>
        <member name="T:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs">
            <summary>
            Arguments for external project finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Useful constructor
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="succeeded">true indicates project built successfully</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            Useful constructor including the ability to set the timestamp
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="succeeded">true indicates project built successfully</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectFinishedEventArgs.Succeeded">
            <summary>
            True if project built successfully, false otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ExternalProjectStartedEventArgs">
            <summary>
            Arguments for external project started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Useful constructor
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Useful constructor, including the ability to set the timestamp of the event
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword</param>
            <param name="senderName">name of the object sending this event</param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ExternalProjectStartedEventArgs.TargetNames">
            <summary>
            Targets that we will build in the project. This may mean different things for different project types,
            our tasks will put something like Rebuild, Clean, etc. here. This may be null if the project is being
            built with the default target.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine3">
            <summary>
            This interface extends IBuildEngine to provide a method allowing building 
            project files in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            
            </remarks>
            <param name="projectFileNames">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">An array of hashtables of additional global properties to apply
                to the child project (array entries can be null). 
                The key and value in the hashtable should both be strings.</param>
            <param name="removeGlobalProperties">A list of global properties which should be removed.</param>
            <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
            <param name="returnTargetOutputs">Should the target outputs be returned in the BuildEngineResult</param>
            <returns>Returns a structure containing the success or failure of the build and the target outputs by project.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine3.Yield">
            <summary>
            Informs the system that this task has a long-running out-of-process component and other work can be done in the
            build while that work completes.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine3.Reacquire">
            <summary>
            Waits to reacquire control after yielding.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RegisteredTaskObjectLifetime">
            <summary>
            Defines the lifetime of a registered task object.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.RegisteredTaskObjectLifetime.Build">
            <summary>
            The registered object will be disposed when the build ends.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.RegisteredTaskObjectLifetime.AppDomain">
            <summary>
            The registered object will be disposed when the AppDomain is unloaded.
            </summary>
            <remarks>
            The AppDomain to which this refers is the one in which MSBuild was launched,
            not the one in which the Task was launched.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine4">
            <summary>
            This interface extends IBuildEngine to provide a mechanism allowing tasks to 
            share data between task invocations.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject(System.Object,System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime,System.Boolean)">
            <summary>
            Registers an object with the system that will be disposed of at some specified time
            in the future.
            </summary>
            <param name="key">The key used to retrieve the object.</param>
            <param name="obj">The object to be held for later disposal.</param>
            <param name="lifetime">The lifetime of the object.</param>
            <param name="allowEarlyCollection">The object may be disposed earlier that the requested time if
            MSBuild needs to reclaim memory.</param>
            <remarks>
            <para>
            This method may be called by tasks which need to maintain state across task invocations,
            such as to cache data which may be expensive to generate but which is known not to change during the 
            build.  It is strongly recommended that <paramref name="allowEarlyCollection"/> be set to true if the
            object will retain any significant amount of data, as this gives MSBuild the most flexibility to 
            manage limited process memory resources.
            </para>
            <para>
            The thread on which the object is disposed may be arbitrary - however it is guaranteed not to
            be disposed while the task is executing, even if <paramref name="allowEarlyCollection"/> is set
            to true.
            </para>
            <para>
            If the object implements IDisposable, IDisposable.Dispose will be invoked on the object before
            discarding it.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)">
            <summary>
            Retrieves a previously registered task object stored with the specified key.
            </summary>
            <param name="key">The key used to retrieve the object.</param>
            <param name="lifetime">The lifetime of the object.</param>
            <returns>
            The registered object, or null is there is no object registered under that key or the object
            has been discarded through early collection.
            </returns>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)">
            <summary>
            Unregisters a previously-registered task object.
            </summary>
            <param name="key">The key used to retrieve the object.</param>
            <param name="lifetime">The lifetime of the object.</param>
            <returns>
            The registered object, or null is there is no object registered under that key or the object
            has been discarded through early collection.
            </returns>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine5">
            <summary>
            This interface extends IBuildEngine to log telemetry.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine5.LogTelemetry(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Logs telemetry.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="properties">The event properties.</param>
        </member>
        <member name="T:Microsoft.Build.Framework.TelemetryEventHandler">
            <summary>
            Type of handler for TelemetryLogged events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IEventSource2">
            <summary>
            This interface defines the events raised by the build engine.
            Loggers use this interface to subscribe to the events they
            are interested in receiving.
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource2.TelemetryLogged">
            <summary>
            this event is raised to when telemetry is logged.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IGeneratedTask">
            <summary>
            An interface implemented by tasks that are generated by ITaskFactory instances.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IGeneratedTask.SetPropertyValue(Microsoft.Build.Framework.TaskPropertyInfo,System.Object)">
            <summary>
            Sets a value on a property of this task instance.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The value to set. The caller is responsible to type-coerce this value to match the property's <see cref="P:Microsoft.Build.Framework.TaskPropertyInfo.PropertyType"/>.</param>
            <remarks>
            All exceptions from this method will be caught in the taskExecution host and logged as a fatal task error
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.IGeneratedTask.GetPropertyValue(Microsoft.Build.Framework.TaskPropertyInfo)">
            <summary>
            Gets the property value.
            </summary>
            <param name="property">The property to get.</param>
            <returns>
            The value of the property, the value's type will match the type given by <see cref="P:Microsoft.Build.Framework.TaskPropertyInfo.PropertyType"/>.
            </returns>
            <remarks>
            MSBuild calls this method after executing the task to get output parameters.
            All exceptions from this method will be caught in the taskExecution host and logged as a fatal task error
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.LazyFormattedBuildEventArgs">
            <summary>
            Stores strings for parts of a message delaying the formatting until it needs to be shown
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.arguments">
            <summary>
            Stores the message arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.originalCulture">
            <summary>
            Stores the original culture for String.Format.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.locker">
            <summary>
            Lock object.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            This constructor allows all event data to be initialized.
            </summary>
            <param name="message">text message.</param>
            <param name="helpKeyword">help keyword.</param>
            <param name="senderName">name of event sender.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.#ctor(System.String,System.String,System.String,System.DateTime,System.Object[])">
            <summary>
            This constructor that allows message arguments that are lazily formatted.
            </summary>
            <param name="message">text message.</param>
            <param name="helpKeyword">help keyword.</param>
            <param name="senderName">name of event sender.</param>
            <param name="eventTimestamp">Timestamp when event was created.</param>
            <param name="messageArgs">Message arguments.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.Message">
            <summary>
            Gets the formatted message.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.LazyFormattedBuildEventArgs.FormatString(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Formats the given string using the variable arguments passed in.
            
            PERF WARNING: calling a method that takes a variable number of arguments is expensive, because memory is allocated for
            the array of arguments -- do not call this method repeatedly in performance-critical scenarios
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <param name="culture">The culture info for formatting the message.</param>
            <param name="unformatted">The string to format.</param>
            <param name="args">Optional arguments for formatting the given string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine">
            <summary>
            This interface exposes functionality on the build engine
            that is required for task authoring.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Allows tasks to raise error events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Allows tasks to raise warning events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Allows tasks to raise message events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.LogCustomEvent(Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Allows tasks to raise custom events to all registered loggers.
            The build engine may perform some filtering or
            pre-processing on the events, before dispatching them.
            </summary>
            <param name="e">Details of event to raise.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.ContinueOnError">
            <summary>
            Returns true if the ContinueOnError flag was set to true for this particular task
            in the project file.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.LineNumberOfTaskNode">
            <summary>
            Retrieves the line number of the task node within the project file that called it.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.ColumnNumberOfTaskNode">
            <summary>
            Retrieves the line number of the task node within the project file that called it.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine.ProjectFileOfTaskNode">
            <summary>
            Returns the full path to the project file that contained the call to this task.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
            <param name="projectFileName">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">A hash table of additional global properties to apply
                to the child project (can be null).  The key and value should both be strings.</param>
            <param name="targetOutputs">The outputs of each specified target (can be null).</param>
            <returns>true, if build was successful</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.IBuildEngine2">
            <summary>
            This interface extends IBuildEngine to provide a method allowing building 
            project files in parallel.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IBuildEngine2.IsRunningMultipleNodes">
            <summary>
            This property allows a task to query whether or not the system is running in single process mode or multi process mode.
            Single process mode (IsRunningMultipleNodes = false) is where the engine is initialized with the number of cpus = 1 and the engine is not a child engine.
            The engine is in multi process mode (IsRunningMultipleNodes = true) when the engine is initialized with a number of cpus > 1 or the engine is a child engine.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary,System.String)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
            <param name="projectFileName">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">A hash table of additional global properties to apply
                to the child project (can be null).  The key and value should both be strings.</param>
            <param name="targetOutputs">The outputs of each specified target (can be null).</param>
            <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
            <returns>true, if build was successful</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.IBuildEngine2.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.IDictionary[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            This method allows tasks to initiate a build on a
            particular project file. If the build is successful, the outputs
            (if any) of the specified targets are returned.
            </summary>
            <remarks>
            1) it is acceptable to pass null for both <c>targetNames</c> and <c>targetOutputs</c>
            2) if no targets are specified, the default targets are built
            3) target outputs are returned as <c>ITaskItem</c> arrays indexed by target name
            </remarks>
            <param name="projectFileNames">The project to build.</param>
            <param name="targetNames">The targets in the project to build (can be null).</param>
            <param name="globalProperties">An array of hashtables of additional global properties to apply
                to the child project (array entries can be null). 
                The key and value in the hashtable should both be strings.</param>
            <param name="targetOutputsPerProject">The outputs of each specified target (can be null).</param>
            <param name="toolsVersion">A tools version recognized by the Engine that will be used during this build (can be null).</param>
            <param name="useResultsCache">If true the operation will only be run if the cache doesn't
                                          already contain the result. After the operation the result is
                                          stored in the cache </param>
            <param name="unloadProjectsOnCompletion">If true the project will be unloaded once the 
                                                    operation is completed </param>
            <returns>true, if build was successful</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.IEventRedirector">
            <summary>
            This interface is used to forward events to another loggers
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.IEventRedirector.ForwardEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            This method is called by the node loggers to forward the events to central logger
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildMessageEventHandler">
            <summary>
            Type of handler for MessageRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildErrorEventHandler">
            <summary>
            Type of handler for ErrorRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildWarningEventHandler">
            <summary>
            Type of handler for WarningRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.CustomBuildEventHandler">
            <summary>
            Type of handler for CustomEventRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStartedEventHandler">
            <summary>
            Type of handler for BuildStartedEvent events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildFinishedEventHandler">
            <summary>
            Type of handler for BuildFinishedEvent events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectStartedEventHandler">
            <summary>
            Type of handler for ProjectStarted events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectFinishedEventHandler">
            <summary>
            Type of handler for ProjectFinished events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetStartedEventHandler">
            <summary>
            Type of handler for TargetStarted events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetFinishedEventHandler">
            <summary>
            Type of handler for TargetFinished events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskStartedEventHandler">
            <summary>
            Type of handler for TaskStarted events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskFinishedEventHandler">
            <summary>
            Type of handler for TaskFinished events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildStatusEventHandler">
            <summary>
            Type of handler for BuildStatus events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.AnyEventHandler">
            <summary>
            Type of handler for AnyEventRaised events
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IEventSource">
            <summary> 
            This interface defines the events raised by the build engine.
            Loggers use this interface to subscribe to the events they
            are interested in receiving.
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.MessageRaised">
            <summary>
            this event is raised to log a message
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.ErrorRaised">
            <summary>
            this event is raised to log an error
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.WarningRaised">
            <summary>
            this event is raised to log a warning
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.BuildStarted">
            <summary>
            this event is raised to log the start of a build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.BuildFinished">
            <summary>
            this event is raised to log the end of a build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.ProjectStarted">
            <summary>
            this event is raised to log the start of a project build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.ProjectFinished">
            <summary>
            this event is raised to log the end of a project build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TargetStarted">
            <summary>
            this event is raised to log the start of a target build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TargetFinished">
            <summary>
            this event is raised to log the end of a target build
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TaskStarted">
            <summary>
            this event is raised to log the start of task execution
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.TaskFinished">
            <summary>
            this event is raised to log the end of task execution
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.CustomEventRaised">
            <summary>
            this event is raised to log custom events
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.StatusEventRaised">
            <summary>
            this event is raised to log any build status event
            </summary>
        </member>
        <member name="E:Microsoft.Build.Framework.IEventSource.AnyEventRaised">
            <summary>
            this event is raised to log any build event.  These events do not include telemetry.  To receive telemetry, you must attach to the <see cref="E:Microsoft.Build.Framework.IEventSource2.TelemetryLogged"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.IForwardingLogger">
            <summary>
            This interface extends the ILogger interface to provide a property which can be used to forward events
            to a logger running in a different process. It can also be used create filtering loggers.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IForwardingLogger.BuildEventRedirector">
            <summary>
            This property is set by the build engine to allow a node loggers to forward messages to the
            central logger
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.IForwardingLogger.NodeId">
            <summary>
            This property is set by the build engine or node to inform the forwarding logger which node it is running on
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.LoggerVerbosity">
            <summary>
            Enumeration of the levels of detail of an event log.
            </summary>
            <remarks>
            The level of detail (i.e. verbosity) of an event log is entirely controlled by the logger generating the log -- a logger
            will be directed to keep its verbosity at a certain level, based on user preferences, but a logger is free to choose the
            events it logs for each verbosity level.
            
            LOGGING GUIDELINES FOR EACH VERBOSITY LEVEL:
            1) Quiet -- only display a summary at the end of build
            2) Minimal -- only display errors, warnings, high importance events and a build summary
            3) Normal -- display all errors, warnings, high importance events, some status events, and a build summary
            4) Detailed -- display all errors, warnings, high and normal importance events, all status events, and a build summary
            5) Diagnostic -- display all events, and a build summary
            
            WARNING: VS Automation code for the Tools/Options MSBuild build verbosity setting will be broken
            by changes to this enum (not to mention existing MSBuild clients and vsproject code). 
            Please make sure to talk to automation devs before changing it.
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Quiet">
            <summary>
            The most minimal output
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Minimal">
            <summary>
            Relatively little output
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Normal">
            <summary>
            Standard output. This should be the default if verbosity level is not set
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Detailed">
            <summary>
            Relatively verbose, but not exhaustive
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.LoggerVerbosity.Diagnostic">
            <summary>
            The most verbose and informative verbosity
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ILogger">
            <summary>
            This interface defines a "logger" in the build system. A logger subscribes to build system events. All logger classes must
            implement this interface to be recognized by the build engine.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ILogger.Verbosity">
            <summary>
            The verbosity level directs the amount of detail that appears in a logger's event log. Though this is only a
            recommendation based on user preferences, and a logger is free to choose the exact events it logs, it is still
            important that the guidelines for each level be followed, for a good user experience.
            </summary>
            <value>The verbosity level.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ILogger.Parameters">
            <summary>
            This property holds the user-specified parameters to the logger. If parameters are not provided, a logger should revert
            to defaults. If a logger does not take parameters, it can ignore this property.
            </summary>
            <value>The parameter string (can be null).</value>
        </member>
        <member name="M:Microsoft.Build.Framework.ILogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Called by the build engine to allow loggers to subscribe to the events they desire.
            </summary>
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ILogger.Shutdown">
            <summary>
            Called by the build engine to allow loggers to release any resources they may have allocated at initialization time,
            or during the build.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.INodeLogger">
            <summary>
            This interface defines a "parallel aware logger" in the build system. A parallel aware logger 
            will accept a cpu count and be aware that any cpu count greater than 1 means the events will
            be received from the logger from each cpu as the events are logged. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.INodeLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
            <summary>
            Initializes the current <see cref="T:Microsoft.Build.Framework.INodeLogger"/> instance.
            </summary>
            <param name="eventSource"></param>
            <param name="nodeCount"></param>
        </member>
        <member name="T:Microsoft.Build.Framework.ITask">
            <summary>
            This interface defines a "task" in the build system. A task is an atomic unit of build operation. All task classes must
            implement this interface to be recognized by the build engine.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITask.BuildEngine">
            <summary>
            This property is set by the build engine to allow a task to call back into it.
            </summary>
            <value>The interface on the build engine available to tasks.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITask.HostObject">
            <summary>
            The build engine sets this property if the host IDE has associated a host object with this particular task.
            </summary>
            <value>The host object instance (can be null).</value>
        </member>
        <member name="M:Microsoft.Build.Framework.ITask.Execute">
            <summary>
            This method is called by the build engine to begin task execution. A task uses the return value to indicate
            whether it was successful. If a task throws an exception out of this method, the engine will automatically
            assume that the task has failed.
            </summary>
            <returns>true, if successful</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.ICancelableTask">
            <summary>
            Interface for tasks which can be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ICancelableTask.Cancel">
            <summary>
            Instructs the task to exit as soon as possible, or to immediately exit if Execute is invoked after this method.
            </summary>
            <remarks>
            Cancel() may be called at any time after the task has been instantiated, even before <see cref="M:Microsoft.Build.Framework.ITask.Execute"/> is called.
            Cancel calls may come in from any thread.  The implementation of this method should not block indefinitely.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskFactory">
            <summary>
            Interface that a task factory Instance should implement
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskFactory.FactoryName">
            <summary>
            Gets the name of the factory.
            </summary>
            <value>The name of the factory.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskFactory.TaskType">
            <summary>
            Gets the type of the task this factory will instantiate.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Initializes this factory for instantiating tasks with a particular inline task block.
            </summary>
            <param name="taskName">Name of the task.</param>
            <param name="parameterGroup">The parameter group.</param>
            <param name="taskBody">The task body.</param>
            <param name="taskFactoryLoggingHost">The task factory logging host.</param>
            <returns>A value indicating whether initialization was successful.</returns>
            <remarks>
            <para>MSBuild engine will call this to initialize the factory. This should initialize the factory enough so that the factory can be asked
            whether or not task names can be created by the factory.</para>
            <para>
            The taskFactoryLoggingHost will log messages in the context of the target where the task is first used.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.GetTaskParameters">
            <summary>
            Get the descriptions for all the task's parameters.
            </summary>
            <returns>A non-null array of property descriptions.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Create an instance of the task to be used.
            </summary>
            <param name="taskFactoryLoggingHost">
            The task factory logging host will log messages in the context of the task.
            </param>
            <returns>
            The generated task, or <c>null</c> if the task failed to be created.
            </returns>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)">
            <summary>
            Cleans up any context or state that may have been built up for a given task.
            </summary>
            <param name="task">The task to clean up.</param>
            <remarks>
            For many factories, this method is a no-op.  But some factories may have built up
            an AppDomain as part of an individual task instance, and this is their opportunity
            to shutdown the AppDomain.
            </remarks>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskFactory2">
            <summary>
            Interface that a task factory Instance should implement if it wants to be able to
            use new UsingTask parameters such as Runtime and Architecture. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory2.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)">
            <summary>
            Initializes this factory for instantiating tasks with a particular inline task block and a set of UsingTask parameters.  MSBuild
            provides an implementation of this interface, TaskHostFactory, that uses "Runtime", with values "CLR2", "CLR4", "CurrentRuntime", 
            and "*" (Any); and "Architecture", with values "x86", "x64", "CurrentArchitecture", and "*" (Any).  An implementer of ITaskFactory2 
            can choose to use these pre-defined Runtime and Architecture values, or can specify new values for these parameters.  
            </summary>
            <param name="taskName">Name of the task.</param>
            <param name="factoryIdentityParameters">Special parameters that the task factory can use to modify how it executes tasks, 
            such as Runtime and Architecture.  The key is the name of the parameter and the value is the parameter's value. This 
            is the set of parameters that was set on the UsingTask using e.g. the UsingTask Runtime and Architecture parameters.</param>
            <param name="parameterGroup">The parameter group.</param>
            <param name="taskBody">The task body.</param>
            <param name="taskFactoryLoggingHost">The task factory logging host.</param>
            <returns>A value indicating whether initialization was successful.</returns>
            <remarks>
            <para>MSBuild engine will call this to initialize the factory. This should initialize the factory enough so that the 
            factory can be asked whether or not task names can be created by the factory.  If a task factory implements ITaskFactory2, 
            this Initialize method will be called in place of ITaskFactory.Initialize.</para>
            <para>
            The taskFactoryLoggingHost will log messages in the context of the target where the task is first used.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskFactory2.CreateTask(Microsoft.Build.Framework.IBuildEngine,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create an instance of the task to be used, with an optional set of "special" parameters set on the individual task invocation using 
            the MSBuildRuntime and MSBuildArchitecture default task parameters.  MSBuild provides an implementation of this interface, 
            TaskHostFactory, that uses "MSBuildRuntime", with values "CLR2", "CLR4", "CurrentRuntime", and "*" (Any); and "MSBuildArchitecture", 
            with values "x86", "x64", "CurrentArchitecture", and "*" (Any).  An implementer of ITaskFactory2 can choose to use these pre-defined 
            MSBuildRuntime and MSBuildArchitecture values, or can specify new values for these parameters.  
            </summary>
            <param name="taskFactoryLoggingHost">
            The task factory logging host will log messages in the context of the task.
            </param>
            <param name="taskIdentityParameters">
            Special parameters that the task factory can use to modify how it executes tasks, such as Runtime and Architecture.  
            The key is the name of the parameter and the value is the parameter's value.  This is the set of parameters that was 
            set to the task invocation itself, via e.g. the special MSBuildRuntime and MSBuildArchitecture parameters.  
            </param>
            <remarks>
            If a task factory implements ITaskFactory2, MSBuild will call this method instead of ITaskFactory.CreateTask.  
            </remarks>
            <returns>
            The generated task, or <c>null</c> if the task failed to be created.
            </returns>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskHost">
            <summary>
            This empty interface is used to pass host objects from an IDE to individual
            tasks.  Depending on the task itself and what kinds parameters and functionality
            it exposes, the task should define its own interface that inherits from this one, 
            and then use that interface to communicate with the host.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskItem">
            <summary>
            This interface defines a project item that can be consumed and emitted by tasks.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem.ItemSpec">
            <summary>
            Gets or sets the item "specification" e.g. for disk-based items this would be the file path.
            </summary>
            <remarks>
            This should be named "EvaluatedInclude" but that would be a breaking change to this interface.
            </remarks>
            <value>The item-spec string.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem.MetadataNames">
            <summary>
            Gets the names of all the metadata on the item.
            Includes the built-in metadata like "FullPath".
            </summary>
            <value>The list of metadata names.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem.MetadataCount">
            <summary>
            Gets the number of pieces of metadata on the item. Includes
            both custom and built-in metadata.
            </summary>
            <value>Count of pieces of metadata.</value>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.GetMetadata(System.String)">
            <summary>
            Allows the values of metadata on the item to be queried.
            </summary>
            <param name="metadataName">The name of the metadata to retrieve.</param>
            <returns>The value of the specified metadata.</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.SetMetadata(System.String,System.String)">
            <summary>
            Allows a piece of custom metadata to be set on the item.
            </summary>
            <param name="metadataName">The name of the metadata to set.</param>
            <param name="metadataValue">The metadata value.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.RemoveMetadata(System.String)">
            <summary>
            Allows the removal of custom metadata set on the item.
            </summary>
            <param name="metadataName">The name of the metadata to remove.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.CopyMetadataTo(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Allows custom metadata on the item to be copied to another item.
            </summary>
            <remarks>
            RECOMMENDED GUIDELINES FOR METHOD IMPLEMENTATIONS:
            1) this method should NOT copy over the item-spec
            2) if a particular piece of metadata already exists on the destination item, it should NOT be overwritten
            3) if there are pieces of metadata on the item that make no semantic sense on the destination item, they should NOT be copied
            </remarks>
            <param name="destinationItem">The item to copy metadata to.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem.CloneCustomMetadata">
            <summary>
            Get the collection of custom metadata. This does not include built-in metadata.
            </summary>
            <remarks>
            RECOMMENDED GUIDELINES FOR METHOD IMPLEMENTATIONS:
            1) this method should return a clone of the metadata
            2) writing to this dictionary should not be reflected in the underlying item.
            </remarks>
            <returns>Dictionary of cloned metadata</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.ITaskItem2">
            <summary>
            This interface adds escaping support to the ITaskItem interface.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ITaskItem2.EvaluatedIncludeEscaped">
            <summary>
            Gets or sets the item include value e.g. for disk-based items this would be the file path.
            </summary>
            <remarks>
            Taking the opportunity to fix the property name, although this doesn't
            make it obvious it's an improvement on ItemSpec.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem2.GetMetadataValueEscaped(System.String)">
            <summary>
            Allows the values of metadata on the item to be queried.
            </summary>
            <remarks>
            Taking the opportunity to fix the property name, although this doesn't
            make it obvious it's an improvement on GetMetadata.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem2.SetMetadataValueLiteral(System.String,System.String)">
            <summary>
            Allows a piece of custom metadata to be set on the item.  Assumes that the value passed
            in is unescaped, and escapes the value as necessary in order to maintain its value. 
            </summary>
            <remarks>
            Taking the opportunity to fix the property name, although this doesn't
            make it obvious it's an improvement on SetMetadata.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ITaskItem2.CloneCustomMetadataEscaped">
            <summary>
            ITaskItem2 implementation which returns a clone of the metadata on this object.
            Values returned are in their original escaped form. 
            </summary>
            <returns>The cloned metadata, with values' escaping preserved.</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute">
            <summary>
            This attribute is used to mark tasks that need to be run in their own app domains. The build engine will create a new app
            domain each time it needs to run such a task, and immediately unload it when the task is finished.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.LoggerException">
            <summary>
            Exception that should be thrown by a logger when it cannot continue.
            Allows a logger to force the build to stop in an explicit way, when, for example, it 
            receives invalid parameters, or cannot write to disk.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This constructor only exists to satisfy .NET coding guidelines. Use the rich constructor instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor(System.String)">
            <summary>
            Creates an instance of this exception using the specified error message.
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this exception using the specified error message and inner exception.
            </summary>
            <param name="message">Message string</param>
            <param name="innerException">Inner exception. Can be null</param>
        </member>
        <member name="M:Microsoft.Build.Framework.LoggerException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            Creates an instance of this exception using rich error information.
            </summary>
            <param name="message">Message string</param>
            <param name="innerException">Inner exception. Can be null</param>
            <param name="errorCode">Error code</param>
            <param name="helpKeyword">Help keyword for host IDE. Can be null</param>
        </member>
        <member name="P:Microsoft.Build.Framework.LoggerException.ErrorCode">
            <summary>
            Gets the error code associated with this exception's message (not the inner exception).
            </summary>
            <value>The error code string.</value>
        </member>
        <member name="P:Microsoft.Build.Framework.LoggerException.HelpKeyword">
            <summary>
            Gets the F1-help keyword associated with this error, for the host IDE.
            </summary>
            <value>The keyword string.</value>
        </member>
        <member name="T:Microsoft.Build.Framework.BuildEventContext">
            <summary>
            Will provide location information for an event, this is especially 
            needed in a multi processor environment
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.nodeId">
            <summary>
            Node event was in 
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.targetId">
            <summary>
            Target event was in
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.projectContextId">
             <summary>
            The node-unique project request context the event was in
             </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.taskId">
            <summary>
            Id of the task the event was caused from
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.projectInstanceId">
            <summary>
            The id of the project instance to which this event refers.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.submissionId">
            <summary>
            The id of the submission.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the original constructor.  No one should ever use this except internally for backward compatibility.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a BuildEventContext with a specified project instance id.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a BuildEventContext with a specific submission id
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.Invalid">
            <summary>
            Returns a default invalid BuildEventContext
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.NodeId">
            <summary>
            NodeId where event took place
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.TargetId">
            <summary>
            Id of the target the event was in when the event was fired
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.ProjectContextId">
            <summary>
            Retrieves the Project Context id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.TaskId">
            <summary>
            Retrieves the task id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.ProjectInstanceId">
            <summary>
            Retrieves the project instance id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.SubmissionId">
            <summary>
            Retrieves the Submission id.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.BuildEventContext.BuildRequestId">
            <summary>
            Retrieves the BuildRequest id.  Note that this is not the same as the global request id on a BuildRequest or BuildResult.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidProjectContextId">
            <summary>
            Indicates an invalid project context identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidTaskId">
            <summary>
            Indicates an invalid task identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidTargetId">
            <summary>
            Indicates an invalid target identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidNodeId">
            <summary>
            Indicates an invalid node identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidProjectInstanceId">
            <summary>
            Indicates an invalid project instance identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.BuildEventContext.InvalidSubmissionId">
            <summary>
            Indicates an invalid submission identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.GetHashCode">
            <summary>
            Retrieves a hash code for this BuildEventContext.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.Equals(System.Object)">
            <summary>
            Compare a BuildEventContext with this BuildEventContext. 
            A build event context is compared in the following way.
            
            1. If the object references are the same the contexts are equivalent
            2. If the object type is the same and the Id values in the context are the same, the contexts are equivalent
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.op_Equality(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Override == so the  equals comparison using this operator will be the same as
            .Equals
            </summary>
            <param name="left">Left hand side operand</param>
            <param name="right">Right hand side operand</param>
            <returns>True if the object values are identical, false if they are not identical</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.op_Inequality(Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Override != so the  equals comparison using this operator will be the same as
             ! Equals
            </summary>
            <param name="left">Left hand side operand</param>
            <param name="right">Right hand side operand</param>
            <returns>True if the object values are not identical, false if they are identical</returns>
        </member>
        <member name="M:Microsoft.Build.Framework.BuildEventContext.InternalEquals(Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            Verify the fields are identical
            </summary>
            <param name="buildEventContext">BuildEventContext to compare to this instance</param>
            <returns>True if the value fields are the same, false if otherwise</returns>
        </member>
        <member name="T:Microsoft.Build.Framework.OutputAttribute">
            <summary>
            This attribute is used by task writers to designate certain task parameters as "outputs". The build engine will only allow
            task parameters (i.e. the task class' .NET properties) that are marked with this attribute to output data from a task. Project
            authors can only use parameters marked with this attribute in a task's &lt;Output&gt; tag. All task parameters, including those
            marked with this attribute, may be treated as inputs to a task by the build engine.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.OutputAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectFinishedEventArgs">
            <summary>
            Arguments for project finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">name of the project</param>
            <param name="succeeded">true indicates project built successfully</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectFinishedEventArgs.#ctor(System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild". This constructor allows the timestamp to be set as well
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">name of the project</param>
            <param name="succeeded">true indicates project built successfully</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectFinishedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectFinishedEventArgs.Succeeded">
            <summary>
            True if project built successfully, false otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.ProjectStartedEventArgs">
            <summary>
            Arguments for project started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.InvalidProjectId">
            <summary>
            Indicates an invalid project identifier.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,Microsoft.Build.Framework.BuildEventContext)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="projectId">project id</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="parentBuildEventContext">event context info for the parent project</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,Microsoft.Build.Framework.BuildEventContext,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="projectId">project id</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="parentBuildEventContext">event context info for the parent project</param>
            <param name="globalProperties">An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing global properties.</param>
            <param name="toolsVersion">The tools version.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized. Also the timestamp can be set
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="eventTimestamp">The <see cref="T:System.DateTime"/> of the event.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.ProjectStartedEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,Microsoft.Build.Framework.BuildEventContext,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="projectId">project id</param>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project name</param>
            <param name="targetNames">targets we are going to build (empty indicates default targets)</param>
            <param name="properties">list of properties</param>
            <param name="items">list of items</param>
            <param name="parentBuildEventContext">event context info for the parent project</param>
            <param name="eventTimestamp">The <see cref="T:System.DateTime"/> of the event.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ProjectId">
            <summary>
            Gets the idenifier of the project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ParentProjectBuildEventContext">
            <summary>
            Event context information, where the event was fired from in terms of the build location
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.projectFile">
            <summary>
            The name of the project file
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ProjectFile">
            <summary>
            Project name
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.targetNames">
            <summary>
            Targets that we will build in the project
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.TargetNames">
            <summary>
            Targets that we will build in the project
            </summary>
        </member>
        <member name="F:Microsoft.Build.Framework.ProjectStartedEventArgs.globalProperties">
            <summary>
            Gets the set of global properties used to evaluate this project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.GlobalProperties">
            <summary>
            Gets the set of global properties used to evaluate this project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.ToolsVersion">
            <summary>
            Gets the tools version used to evaluate this project.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.Properties">
            <summary>
            List of properties in this project. This is a live, read-only list.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.ProjectStartedEventArgs.Items">
            <summary>
            List of items in this project. This is a live, read-only list.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RequiredAttribute">
            <summary>
            This class defines the attribute that a task writer can apply to a task's property to declare the property to be a
            required property.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RequiredAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RequiredRuntimeAttribute">
            <summary>
            When marked with the RequiredRuntimeAttribute, a task indicates that it has stricter 
            runtime requirements than a regular task - this tells MSBuild that it will need to potentially 
            launch a separate process for that task if the current runtime does not match the version requirement.
            This attribute is currently non-functional since there is only one version of the CLR that is
            capable of running MSBuild v2.0 or v3.5 - the runtime v2.0 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RequiredRuntimeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking a version, such as "v2.0". 
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.RequiredRuntimeAttribute.RuntimeVersion">
            <summary>
            Returns the runtime version the attribute was constructed with,
            e.g., "v2.0"
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RunInMTAAttribute">
            <summary>
            This attribute is used to mark a task class as explicitly not being required to run in the STA for COM.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RunInMTAAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.RunInSTAAttribute">
            <summary>
            This attribute is used to mark a task class as being required to run in a Single Threaded Apartment for COM.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.RunInSTAAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetFinishedEventArgs">
            <summary>
            Arguments for target finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="succeeded">true if target built successfully</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.IEnumerable)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="succeeded">true if target built successfully</param>
            <param name="targetOutputs">Target output items for the target. If batching will be null for everything except for the last target in the batch</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.DateTime,System.Collections.IEnumerable)">
            <summary>
            This constructor allows event data to be initialized including the timestamp when the event was created.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="succeeded">true if target built successfully</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
            <param name="targetOutputs">An <see cref="T:System.Collections.IEnumerable"/> containing the outputs of the target.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.TargetName">
            <summary>
            Target name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.Succeeded">
            <summary>
            True if target built successfully, false otherwise
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.TargetFile">
            <summary>
            File where this target was declared.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetFinishedEventArgs.TargetOutputs">
            <summary>
            Target outputs
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TargetStartedEventArgs">
            <summary>
            Arguments for target started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>    
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TargetStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized including the timestamp when the event was created.
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="targetName">target name</param>
            <param name="projectFile">project file</param>
            <param name="targetFile">file in which the target is defined</param>
            <param name="parentTarget">The part of the target.</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.TargetName">
            <summary>
            target name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.ParentTarget">
            <summary>
            Target which caused this target to build
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TargetStartedEventArgs.TargetFile">
            <summary>
            File where this target was declared.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskCommandLineEventArgs">
            <summary>
            This class is used by tasks to log their command lines. This class extends
            <see cref="T:Microsoft.Build.Framework.BuildMessageEventArgs"/> so that command lines can be logged as
            messages. Logging a command line is only relevant for tasks that wrap an
            underlying executable/tool, or emulate a shell command. Tasks that have
            no command line equivalent should not raise this extended message event.
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing ISerializable
            imposes a serialization contract -- it is a promise to never change the
            type's fields i.e. the type is immutable; adding new fields in the next
            version of the type without following certain special FX guidelines, can
            break both forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskCommandLineEventArgs.#ctor">
            <summary>
            Default (family) constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskCommandLineEventArgs.#ctor(System.String,System.String,Microsoft.Build.Framework.MessageImportance)">
            <summary>
            Creates an instance of this class for the given task command line.
            </summary>
            <param name="commandLine">The command line used by a task to launch
            its underlying tool/executable.</param>
            <param name="taskName">The name of the task raising this event.</param>
            <param name="importance">Importance of command line -- controls whether
            the command line will be displayed by less verbose loggers.</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskCommandLineEventArgs.#ctor(System.String,System.String,Microsoft.Build.Framework.MessageImportance,System.DateTime)">
            <summary>
            Creates an instance of this class for the given task command line. This constructor allows the timestamp to be set
            </summary>
            <param name="commandLine">The command line used by a task to launch
            its underlying tool/executable.</param>
            <param name="taskName">The name of the task raising this event.</param>
            <param name="importance">Importance of command line -- controls whether
            the command line will be displayed by less verbose loggers.</param>
            <param name="eventTimestamp">Timestamp when the event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskCommandLineEventArgs.CommandLine">
            <summary>
            Gets the task command line associated with this event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskCommandLineEventArgs.TaskName">
            <summary>
            Gets the name of the task that raised this event.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskFinishedEventArgs">
            <summary>
            Arguments for task finished events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param> 
            <param name="succeeded">true indicates task succeed</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskFinishedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized and the timestamp to be set
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param> 
            <param name="succeeded">true indicates task succeed</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.TaskName">
            <summary>
            Task Name
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.Succeeded">
            <summary>
            True if target built successfully, false otherwise
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskFinishedEventArgs.TaskFile">
            <summary>
            MSBuild file where this task was defined.   
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskPropertyInfo">
            <summary>
            Class which represents the parameter information from the using task as a strongly typed class.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskPropertyInfo.#ctor(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Encapsulates a list of parameters declared in the UsingTask
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="typeOfParameter">The actual type of the parameter</param>
            <param name="output">True if the parameter is both an output and and input parameter. False if the parameter is only an input parameter</param>
            <param name="required">True if the parameter must be supplied to each invocation of the task.</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.PropertyType">
            <summary>
            The type of the property
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.Output">
            <summary>
            This task parameter is an output parameter (analogous to [Output] attribute)
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskPropertyInfo.Required">
            <summary>
            This task parameter is required (analogous to the [Required] attribute)
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TaskStartedEventArgs">
            <summary>
            Arguments for task started events
            </summary>
            <remarks>
            WARNING: marking a type [Serializable] without implementing
            ISerializable imposes a serialization contract -- it is a
            promise to never change the type's fields i.e. the type is
            immutable; adding new fields in the next version of the type
            without following certain special FX guidelines, can break both
            forward and backward compatibility
            </remarks>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param>
        </member>
        <member name="M:Microsoft.Build.Framework.TaskStartedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            This constructor allows event data to be initialized.
            Sender is assumed to be "MSBuild".
            </summary>
            <param name="message">text message</param>
            <param name="helpKeyword">help keyword </param>
            <param name="projectFile">project file</param>
            <param name="taskFile">file in which the task is defined</param>
            <param name="taskName">task name</param>
            <param name="eventTimestamp">Timestamp when event was created</param>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskStartedEventArgs.TaskName">
            <summary>
            Task name.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskStartedEventArgs.ProjectFile">
            <summary>
            Project file associated with event.   
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TaskStartedEventArgs.TaskFile">
            <summary>
            MSBuild file where this task was defined.   
            </summary>
        </member>
        <member name="T:Microsoft.Build.Framework.TelemetryEventArgs">
            <summary>
            Arguments for telemetry events.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TelemetryEventArgs.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Framework.TelemetryEventArgs.Properties">
            <summary>
            Gets or sets a list of properties associated with the event.
            </summary>
        </member>
    </members>
</doc>
